{
  "name": "Laukvikcsv",
  "tagline": "Java library to parse CSV files with ease",
  "body": "LaukvikCSV\r\n==========\r\n\r\n**Continuous Integration:** [![Build Status](https://travis-ci.org/laukvik/LaukvikCSV.svg?branch=master)](https://travis-ci.org/laukvik/LaukvikCSV) <br/>\r\n**License:** [Apache 2.0](http://www.apache.org/licenses/LICENSE-2.0)<br/>\r\n\r\n\r\nAn easy to use API for reading, writing, querying and exporting data.\r\n\r\n\r\n\r\n\r\n## Reading files\r\n\r\nThe easiest way to read a CSV file is to call the default constructor. This method will try to auto detect separator character and encoding.\r\n\r\n    CSV csv = new CSV(new File(\"presidents.csv\"));\r\n    \r\nTo read files using a SEMI COLON as separator character\r\n\r\n    CSV csv = new CSV();\r\n    csv.readFile( new File(\"presidents.csv\"), CSV.SEMICOLON );\r\n\r\nTo read files using a semi colon as PIPE character\r\n\r\n    CSV csv = new CSV();\r\n    csv.readFile( new File(\"presidents.csv\"), CSV.PIPE );\r\n\r\nTo read files using a semi colon as TAB character\r\n\r\n    CSV csv = new CSV();\r\n    csv.readFile( new File(\"presidents.csv\"), CSV.TAB );\r\n\r\n\r\n\r\n## Reading file with very large data sets\r\n\r\n    try (CsvReader r = new CsvReader( new File(\"presidents\"), Charset.forName(charset)) )) {\r\n        while (r.hasNext()) {\r\n            Row row = r.next();\r\n        }\r\n    }\r\n    catch (IOException e) {\r\n        e.printStacktrace();\r\n    }\r\n\r\n\r\n## Reading POJO\r\n\r\n    List<Employee> employees = new ArrayList<>();\r\n    employees.add( new Employee(\"Bob\",25,false) );\r\n    employees.add( new Employee(\"Jane\",24,true) );\r\n    employees.add( new Employee(\"Yay\",32,false) );\r\n    CSV csv = new CSV();\r\n    csv.readJava(employees);\r\n\r\n\r\n## Writing files\r\n\r\n    csv.write( new File(\"presidents.csv\") );\r\n\r\n\r\n\r\n## Export files\r\n\r\nTo write the contents to a CSV file\r\n\r\n    csv.writeFile( new File(\"presidents.csv\") );\r\n\r\nTo write the contents to a XML file\r\n\r\n    csv.writeXML( new File(\"presidents.xml\") );\r\n\r\nTo write the contents to a JSON file\r\n\r\n    csv.writeXML( new File(\"presidents.json\") );\r\n    \r\nTo write the contents to a HTML file\r\n\r\n    csv.writeXML( new File(\"presidents.html\") );\r\n    \r\nTo write the contents to ResourceBundle(s)\r\n\r\n    csv.writeXML( new File(\"presidents.properties\") );\r\n\r\n\r\n\r\n## Working with columns\r\n\r\nCreating a CSV with two columns\r\n\r\n    CSV csv = new CSV();\r\n    csv.addColumn(\"President\");\r\n    csv.addColumn(\"Party\");\r\n    \r\nReordering columns. The following example moves the column \"Party\" from index 1 to index 0 \r\n\r\n    csv.getMetaData().moveColumn(1,0);\r\n    \r\nRemoves the first column (President).\r\n\r\n    csv.getMetaData().removeColumn(0);\r\n\r\n    \r\n    \r\n    \r\n\r\n## Working with rows\r\n\r\nAdding a new row with data\r\n\r\n    CSV csv = new CSV();\r\n    StringColumn president = csv.addColumn(\"President\");\r\n    StringColumn party = csv.addColumn(\"Party\");\r\n    \r\n    csv.addRow().update(president, \"Barack Obama\").update(party, \"Democratic\");\r\n\r\nMoving a row up or down\r\n\r\n    csv.moveRow( 1, 2 );\r\n    \r\nSwapping two rows\r\n\r\n    csv.swapRows( 1, 2 );\r\n    \r\nRemoving rows\r\n\r\n    csv.removeRow( 5 );\r\n    \r\nRemoving rows between range\r\n\r\n    csv.removeRows( 5, 10 );\r\n    \r\nFinding the index\r\n\r\n    csv.indexOf( row );\r\n\r\nInserting row at a specific index\r\n\r\n    CSV csv = new CSV();\r\n    StringColumn president = csv.addStringColumn(\"President\");\r\n    csv.addRow(0).update(president, \"Barak Obama\");\r\n\r\n\r\n\r\n## Iterating rows\r\n\r\nIterating all rows\r\n\r\n    CSV csv = new CSV();\r\n    for (int y=0; y<csv.getRowCount(); y++){\r\n        Row row = csv.getRow(y);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n## Using queries \r\n\r\nThe API supports fluent queries similar to SQL. The first example finds all rows where President is Barack Obama\r\n\r\n    List<Row> rows = csv.findByQuery().where().column(\"President\").is(\"Barack Obama\").getResultList();\r\n    \r\nThe second example uses sorting for the results\r\n    \r\n    List<Row> rows = csv.findByQuery().orderBy().asc(\"President\").getResultList();\r\n\r\n\r\n\r\n## FrequencyDistribution\r\n\r\nBuilds a FrequencyDistribution for column with index 2;\r\n\r\n    FrequencyDistribution fd = csv.buildFrequencyDistribution( 2 );\r\n\r\n\r\n## Distinct Values\r\n\r\n    Set<String> values = csv.buildDistinctValues(1);\r\n\r\n\r\n\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}